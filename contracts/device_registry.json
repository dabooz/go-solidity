{"info":{"language":"Solidity","languageVersion":"0.3.1","abiDefinition":[{"inputs":[],"type":"function","constant":true,"name":"get_owner","outputs":[{"type":"address","name":"r"}]},{"inputs":[],"type":"function","constant":false,"name":"kill","outputs":[]},{"inputs":[],"type":"function","constant":true,"name":"get_number_registered","outputs":[{"type":"uint256","name":"r"}]},{"inputs":[],"type":"function","constant":true,"name":"get_bank","outputs":[{"type":"address","name":"r"}]},{"inputs":[{"type":"uint256","name":"_start"},{"type":"uint256","name":"_end"}],"type":"function","constant":true,"name":"all_devices","outputs":[{"type":"address[]","name":"r"}]},{"inputs":[{"type":"address","name":"_device"}],"type":"function","constant":false,"name":"deregister","outputs":[{"type":"bool","name":"r"}]},{"inputs":[],"type":"function","constant":true,"name":"find_by_owner","outputs":[{"type":"address[]","name":"r"}]},{"inputs":[{"type":"address","name":"_device"},{"type":"bytes32[]","name":"_desc"}],"type":"function","constant":false,"name":"register","outputs":[{"type":"bool","name":"r"}]},{"inputs":[{"type":"address","name":"_device"}],"type":"function","constant":true,"name":"get_description","outputs":[{"type":"bytes32[]","name":"r"}]},{"inputs":[{"type":"uint256","name":"_start"},{"type":"uint256","name":"_end"},{"type":"bytes32[]","name":"_filter"}],"type":"function","constant":true,"name":"find_by_attributes","outputs":[{"type":"address[]","name":"r"}]},{"inputs":[{"type":"address","name":"_bank"}],"type":"function","constant":false,"name":"set_bank","outputs":[]},{"inputs":[],"type":"constructor","constant":false,"name":"","outputs":null},{"inputs":[{"type":"uint256","name":"_eventcode"},{"type":"address","name":"_device_contract"},{"type":"address","name":"_registrant"},{"type":"bytes32[]","name":"_attributes"}],"type":"event","constant":false,"name":"NewRegisterDevice","outputs":null},{"inputs":[{"type":"uint256","name":"_eventcode"},{"type":"address","name":"_device_contract"},{"type":"address","name":"_registrant"},{"type":"bytes32[]","name":"_attributes"}],"type":"event","constant":false,"name":"UpdateRegisterDevice","outputs":null},{"inputs":[{"type":"uint256","name":"_eventcode"},{"type":"address","name":"_device_contract"},{"type":"address","name":"_registrant"}],"type":"event","constant":false,"name":"DeregisterDevice","outputs":null}],"compilerVersion":"0.3.1","developerDoc":{"methods":{}},"userDoc":{"methods":{}},"source":"contract container_executor {function get_owner() constant returns (address r) {}}contract token_bank {function mint(uint _amount) {}}contract device_registry {address owner;token_bank piggy_bank;mapping (address =\u003e Description) devices;struct Description {mapping (bytes32 =\u003e bytes32) values;mapping (uint =\u003e bytes32) index;uint last_index;}mapping (uint =\u003e address) index;uint last_index = 0;mapping (address =\u003e MyDevices) owned;struct MyDevices {mapping (uint =\u003e address) device;uint last_index;}bytes32[] desc_out;address[] search_out;function get_number_registered() constant returns (uint r) {return last_index;}enum event_codes {new_register_event_code,update_register_event_code,deregister_event_code}event NewRegisterDevice(uint indexed _eventcode, address indexed _device_contract, address indexed _registrant, bytes32[] _attributes) anonymous;event UpdateRegisterDevice(uint indexed _eventcode, address indexed _device_contract, address indexed _registrant, bytes32[] _attributes) anonymous;event DeregisterDevice(uint indexed _eventcode, address indexed _device_contract, address indexed _registrant) anonymous;function register(address _device, bytes32[] _desc) returns (bool r) {if (_device == address(0) || _desc.length == 0) {return false;}if (tx.origin == owner || tx.origin == container_executor(_device).get_owner()) {var existing_reg = devices[_device];bool exists = false;if (existing_reg.last_index != 0) {delete devices[_device];exists = true;UpdateRegisterDevice(uint(event_codes.update_register_event_code), _device, tx.origin, _desc);}devices[_device] = Description({last_index:0});from_input(devices[_device],_desc);index[last_index] = _device;if (exists == false) {NewRegisterDevice(uint(event_codes.new_register_event_code), _device, tx.origin, _desc);piggy_bank.mint(5);last_index += 1;add_to_mine(_device);}return true;} else {return false;}}function find_by_attributes(uint _start, uint _end, bytes32[] _filter) constant returns (address[] r) {if (_filter.length == 0 || _end \u003c _start) {search_out.length = 0;return search_out;}uint max_size = _end - _start + 1;uint matches = 0;if (max_size == 0) {max_size = 20;}if (max_size \u003e get_number_registered()) {max_size = get_number_registered();}search_out.length = max_size;uint all_devices = 0;bool done = false;while (all_devices \u003c last_index \u0026\u0026 done == false) {var attribs = devices[index[all_devices]];uint a = 0;bool index_matches_filter = true;while (a \u003c _filter.length \u0026\u0026 index_matches_filter == true) {if (_filter[a+1] != attribs.values[_filter[a]]) {index_matches_filter = false;}a += 2;}if (index_matches_filter == true) {matches += 1;if (matches-1 \u003e= _start \u0026\u0026 matches-1 \u003c= _end) {search_out[matches-1-_start] = index[all_devices];if (matches-_start == max_size) {done = true;}}}all_devices += 1;}search_out.length = matches-_start;return search_out;}function all_devices(uint _start, uint _end) constant returns (address[] r) {if (_end \u003c _start) {search_out.length = 0;return search_out;}uint max_size = _end - _start + 1;if (max_size == 0 || max_size \u003e get_number_registered()) {max_size = get_number_registered();}search_out.length = max_size;uint all_devices = _start;bool done = false;while (all_devices \u003c last_index \u0026\u0026 done == false) {var attribs = devices[index[all_devices]];search_out[all_devices-_start] = index[all_devices];all_devices += 1;if (all_devices \u003e _end) {done = true;}}if (done == false) {search_out.length = all_devices-_start;}return search_out;}function find_by_owner() constant returns (address[] r) {uint my_devices = 0;var mine = owned[tx.origin];search_out.length = mine.last_index;while (my_devices \u003c mine.last_index) {search_out[my_devices] = mine.device[my_devices];my_devices += 1;}return search_out;}function add_to_mine(address _device) internal {var mine = owned[tx.origin];if (mine.last_index == 0) {owned[tx.origin] = MyDevices({last_index:0});mine = owned[tx.origin];}mine.device[mine.last_index] = _device;mine.last_index += 1;}function remove_from_mine(address _device) internal {var mine = owned[tx.origin];bool removed = false;if (mine.last_index != 0) {uint my_devices = 0;while (my_devices \u003c mine.last_index) {if (mine.device[my_devices] == _device) {delete mine.device[my_devices];removed = true;} else if (removed == true) {mine.device[my_devices-1] = mine.device[my_devices];}my_devices += 1;}delete mine.device[mine.last_index-1];mine.last_index -= 1;}}function get_description(address _device) constant returns (bytes32[] r) {return to_output(devices[_device]);}function deregister(address _device) returns (bool r) {if (_device == address(0)) {return false;}if (tx.origin == owner || tx.origin == container_executor(_device).get_owner()) {delete devices[_device];DeregisterDevice(uint(event_codes.deregister_event_code), _device, tx.origin);uint i = 0;bool removed = false;while (i \u003c last_index) {if (index[i] == _device) {delete index[i];removed = true;} else if (removed == true) {index[i-1] = index[i];}i += 1;}delete index[last_index-1];last_index -= 1;remove_from_mine(_device);return true;} else {return false;}}function from_input(Description storage _new_desc, bytes32[] _desc) constant internal {_new_desc.last_index = 0;uint i = 0;while (i \u003c _desc.length) {_new_desc.values[_desc[i]] = _desc[i+1];_new_desc.index[_new_desc.last_index] = _desc[i];_new_desc.last_index += 1;i += 2;}return;}function to_output(Description storage _d) constant internal returns (bytes32[] r) {desc_out.length = _d.last_index*2;uint i = 0;while (i \u003c _d.last_index) {desc_out[i*2] = _d.index[i];desc_out[(i*2)+1] = _d.values[desc_out[i*2]];i += 1;}return desc_out;}function set_bank(address _bank) {if (owner == msg.sender) {piggy_bank = token_bank(_bank);}}function get_bank() constant returns (address r) {return piggy_bank;}function device_registry() {owner = msg.sender;}function get_owner() constant returns (address r) {return owner;}function kill() {if (msg.sender == owner) suicide(owner);}}"},"code":"0x6060604052600060045560008054600160a060020a0319163317905561109a806100296000396000f36060604052361561008d5760e060020a60003504630ac298dc811461008f57806341c0e1b5146100a25780635a787a53146100cc5780636ac52782146100d85780636fa5b6ed146100ec57806384ac33ec1461013e57806384e0ab681461015e5780639bf81fab146101b8578063ccee5fcd14610225578063da1d1783146102a1578063dacf64e21461035b575b005b610390600054600160a060020a03165b90565b61008d600054600160a060020a0390811633919091161415610ecf57600054600160a060020a0316ff5b6103ad5b60045461009f565b610390600154600160a060020a031661009f565b6103bf6004356024356040805160208101909152600080825280808086861015610a405760006007600050818154818355818115116109d5578183600052602060002091820191016109d59190610347565b6103ad60043560008080600160a060020a038416811415610cd157610dc7565b6103bf6040805160208181018352600080835232600160a060020a03168152600590915291822060018101546007805482825593949382908015829011610be757818360005260206000209182019101610be79190610347565b6040805160248035600481810135602081810280870182019097528186526103ad9683359693956044950192918291908501908490808284375094965050505050505060008080600160a060020a038516811480610217575083516000145b1561040957600092506105d0565b6103bf60043560408051602081810183526000808352600160a060020a0385168152600290915291909120610ccb90602060405190810160405280600081526020015060008260020160005054600202600660005081815481835581811511610f5357818360005260206000209182019101610f539190610347565b60408051604435600481810135602081810285810182019096528185526103bf95833595602480359660649592949101928291850190849080828437509496505050505050506020604051908101604052806000815260200150600060006000600060006000600088516000148061031857508a8a105b1561075b57600060076000508181548183558181151161077d5781836000526020600020918201910161077d91905b808211156107eb5760008155600101610347565b61008d600435600054600160a060020a039081163391909116141561038d5760018054600160a060020a031916821790555b50565b60408051600160a060020a03929092168252519081900360200190f35b60408051918252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390f35b600054600160a060020a03908116329091161480610473575084600160a060020a0316630ac298dc6040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151600160a060020a03908116329091161490505b156105cb575050600160a060020a038316600090815260026020819052604082209081015490919081146105095760028201819055604080516020808252865182820152865160019432600160a060020a0390811695908b169487948b94919384938401928683019290810291829185918391869190600490601f850104600f02600301f1509050019250505060405180910390a35b6040805160208181018352600091829052600160a060020a03881682526002908190529181209182018190556105d8919086905b8151811015610f4e57818160010181518110156100025790602001906020020151836000016000506000848481518110156100025750506020848102860181015182529190915260409020558151829082908110156100025750506020818102830181015160028581018054600090815260018881019095526040902092909255815490920190550161053d565b600092505b505092915050565b60045460009081526003602052604081208054600160a060020a031916871790558114156107525732600160a060020a031685600160a060020a031660008660405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019250505060405180910390a3604080516001547fa0712d68000000000000000000000000000000000000000000000000000000008252600560048301529151600160a060020a03929092169163a0712d6891602481810192600092909190829003018183876161da5a03f115610002575050600480546001019055506107528532600160a060020a0316600090815260056020526040812060018101549091141561072257604080516020818101909252600080825232600160a060020a0316905260059091525160018201555b6001818101805460009081526020849052604090208054600160a060020a03191685179055805490910190555050565b600192506105d0565b8a8a03600101965060009550866000141561077557601496505b6107ef6100d0565b505060078054604080516020838102820181019092528281529450919250908301828280156107d657602002820191906000526020600020905b8154600160a060020a03168152600191909101906020018083116107b7575b50505050509750505050505050509392505050565b5090565b871115610801576107fe6100d0565b96505b8660076000508181548183558181151161082e5781836000526020600020918201910161082e9190610347565b5050505060009450600093505b6004548510801561084c5750836000145b156108ee57505050600082815260036020908152604080832054600160a060020a03168352600290915281209060015b88518210801561088c5750806001145b1561091d578260000160005060008a8481518110156100025790602001906020020151815260200190815260200160002060005054898360010181518110156100025760209081029091010151146108e2575060005b6002919091019061087c565b8a860360076000508181548183558181151161077d5781836000526020600020918201910161077d9190610347565b80600114156109c95760018601958b901080159061093e5750896001870311155b156109c9576003600050600086815260200190815260200160002060009054906101000a9004600160a060020a031660076000508c60018903038154811015610002576000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03191690911790558a86038714156109c957600193505b6001949094019361083b565b50506040805160078054602081810284018101909452808352919450925090830182828015610a2e57602002820191906000526020600020905b8154600160a060020a0316815260019190910190602001808311610a0f575b505050505094505b5050505092915050565b86860360010193508360001480610a5d5750610a5a6100d0565b84115b15610a6d57610a6a6100d0565b93505b83600760005081815481835581811511610a9a57818360005260206000209182019101610a9a9190610347565b50505050869250600091505b60045483108015610ab75750816000145b15610b4a5750600082815260036020818152604080842054600160a060020a031680855260028352908420938690529190526007805489860390811015610002576000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03191690911790556001929092019185831115610b4557600191505b610aa6565b8160001415610b82578683036007600050818154818355818115116109d5578183600052602060002091820191016109d59190610347565b6007600050805480602002602001604051908101604052809291908181526020018280548015610a2e57602002820191906000526020600020908154600160a060020a0316815260019190910190602001808311610a0f575b50505050509450610a36565b505050505b6001810154821015610c655760008281526020829052604090205460078054600160a060020a039290921691849081101561000257506000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68883018054600160a060020a031916909117905560019190910190610bec565b6007600050805480602002602001604051908101604052809291908181526020018280548015610cbf57602002820191906000526020600020905b8154600160a060020a0316815260019190910190602001808311610ca0575b50505050509250505090565b92915050565b600054600160a060020a03908116329091161480610d3b575083600160a060020a0316630ac298dc6040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151600160a060020a03908116329091161490505b15610dc257600160a060020a0384811660008181526002602081905260408083208201839055513290941693909190a35060009050805b600454821015610dce57600082815260036020526040902054600160a060020a0385811691161415610e79575060406000908120805491839052600160a060020a03199190911690556001610eba565b600092505b5050919050565b6004805460001990810160009081526003602052604090208054600160a060020a03191690558154019055610ec68432600160a060020a03166000908152600560205260408120600181015490919081908114610eff575b6001830154811015610ed157600081815260208490526040902054600160a060020a0385811691161415610f055760406000908120805491839052600160a060020a031991909116905560019150610f46565b8060011415610eba57600082815260036020526040808220546000198501835291208054600160a060020a031916600160a060020a03929092169190911790555b60019190910190610d72565b60019250610dc7565b565b60018301805460001990810160009081526020869052604090208054600160a060020a031916905581540190555b50505050565b8160011415610f4657600081815260208490526040808220546000198401835291208054600160a060020a031916600160a060020a03929092169190911790555b600101610e26565b505050565b50505050600090505b60028301548110156110415760008181526001840160205260409020546006805460028402908110156100025760008281527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f82019390935581548693929190811015610002579082527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0181505481526020810191909152604001600020546006805460028402600101908110156100025760009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01905055600101610f5c565b600680546040805160208381028201810190925282815292919083018282801561108d57602002820191906000526020600020905b816000505481526020019060010190808311611076575b505050505091505091905056"}